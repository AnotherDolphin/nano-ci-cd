version: 2.1
orbs:
  node: circleci/node@5.0.2
jobs:
  # build front and backend directories
  build:
    docker:
      - image: "cimg/base:stable"
    steps:
      - node/install
      - checkout
      - run:
          name: Front-End Install
          command: |
              npm run frontend:install
      - run:
          name: Back-End Install
          command: |
            npm run backend:install
      - run:
          name: Front-End Build
          command: |
            npm run frontend:build
      - run:
          name: Back-End Build
          command: |
            npm run backend:build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/udagram-api/www
            - project/udagram-frontend/www
  # test build directories
  test:
    docker:
        - image: "cimg/base:stable"
    steps:
      - node/install
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Back-End Testing
          command: |
            npm run backend:test
      - run:
          name: Front-End Testing
          command: |
            npm run frontend:test
  # deploy api to ebs
  deploy_eb:
    docker:
        - image: "cimg/base:stable"
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install pip
          command: |
            sudo apt update
            sudo apt install -y python3-pip python-dev
      - run:
          name: Install AWS dependencies
          command: |
            sudo pip install awsebcli
      - run:
          name: Backend Deploy
          command: cd udagram-api && cd www && zip -r www.zip . && cd .. && eb deploy Uda-env
      - run:
          name: set env variables
          shell: /bin/bash
          command: sh udagram-api/setenv.sh
  # deploy frontend to S3
  deploy_s3:
    docker:
      - image: cibuilds/aws:1.16.1
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Frontend Deploy
          command: cd udagram-frontend && aws s3 cp --recursive --acl public-read ./www s3://nano-cicd/
workflows:
  do:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
      - test:
          requires:
            - build
      - deploy_eb:
          requires:
            - build
      - deploy_s3:
          requires:
            - build